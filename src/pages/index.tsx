import Head from 'next/head'
import { atom, useAtom } from 'jotai'
import axios from 'axios'
import { useQuery } from '@tanstack/react-query'
import { F } from 'ts-toolbelt'
import { z } from 'zod'
import BarLoader from 'react-spinners/BarLoader'
import styles from '@/styles/Home.module.css'
import { COUNTRIES_MAP } from '@/countries'

type DriverLine = {
  name: string
}

type Season = number

const date = new Date()
const currentYear = date.getFullYear()
const yearAtom = atom(currentYear)

const baseUrl = 'http://ergast.com/api/f1/'

const driverSchema = z.object({
  Driver: z.object({
    code: z.string(),
    dateOfBirth: z.date(),
    driverId: z.string(),
    familyName: z.string(),
    givenName: z.string(),
    nationality: z.string(),
    permanentNumber: z.string(),
  }),
  points: z.string(),
  position: z.string(),
  wins: z.string(),
})
type Driver = z.infer<typeof driverSchema>

const params = { limit: '100' }
async function fetchF1Data<T>(
  endpoint: string
): Promise<T> {
  try {
    const response = await axios.get(
      `${baseUrl}${endpoint}.json`,
      { params }
    )
    return response.data
  } catch (error) {
    throw new Error(
      `Error fetching data for ${endpoint}: ${error}`
    )
  }
}

async function getDriverStandings(
  season: Season
): Promise<Driver[]> {
  try {
    const drivers = await fetchF1Data<any>(
      `${season}/driverStandings`
    )
    return drivers.MRData.StandingsTable.StandingsLists[0]
      .DriverStandings
  } catch (error) {
    console.error(`Error: ${error}`)
    throw new Error(`Error: ${error}`)
  }
}

async function getSeasonList() {
  try {
    const seasons = await fetchF1Data<any>('seasons')
    return seasons.MRData.SeasonTable.Seasons
  } catch (error) {
    console.error(`Error: ${error}`)
    throw new Error(`Error: ${error}`)
  }
}

async function getCountryFlagFromNationality(
  nationality: string
) {
  if (
    nationality === undefined ||
    nationality === null ||
    nationality === ''
  )
    return ''
  try {
    const response = await axios.get(
      `https://countryflagsapi.com/svg/${COUNTRIES_MAP[nationality]}`
    )
    return response.data
  } catch (error) {
    throw new Error(
      `Error fetching data for ${nationality}: ${error}`
    )
  }
}

const SeasonList = () => {
  const [year, setYear] = useAtom(yearAtom)
  const { data, isLoading, error } = useQuery({
    queryKey: ['seasons'],
    queryFn: getSeasonList,
  })

  if (isLoading) return <BarLoader color="#FFF" />
  if (error) return <p>Error! :((((</p>

  return (
    <div className="relative w-full lg:max-w-sm">
      <select
        className="w-full p-2.5 text-gray-500 bg-white border rounded-md shadow-sm outline-none appearance-none focus:border-indigo-600"
        onChange={(e) => setYear(parseInt(e.target.value))}
        placeholder={`${year}`}
        defaultValue={year}
      >
        {data.map(({ season }: { season: number }) => (
          <option key={season}>{season}</option>
        ))}
      </select>
    </div>
  )
}

type DriverRowProps = {
  firstName: string
  lastName: string
  nationality: string
}
const DriverRow = ({
  firstName,
  lastName,
  nationality,
}: DriverRowProps) => {
  const { data, isLoading, error } = useQuery({
    queryKey: ['flag'],
    queryFn: () =>
      getCountryFlagFromNationality(nationality),
  })

  return (
    <div style={{ display: 'flex' }}>
      <div
        style={{ width: 20, height: 20 }}
        dangerouslySetInnerHTML={{ __html: data }}
      />
      <p>
        {firstName} {lastName}
      </p>
    </div>
  )
}

export default function Home() {
  const [year] = useAtom(yearAtom)
  const { data, isLoading, error } = useQuery({
    queryKey: ['drivers', year],
    queryFn: () => getDriverStandings(year),
  })

  if (isLoading) return <BarLoader color="#FFF" />
  if (error) return <p>Error! :((((</p>

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <SeasonList />
        <div>
          {data?.map((item, index) => {
            const { givenName, familyName, nationality } =
              item.Driver
            return (
              <div key={index}>
                <DriverRow
                  firstName={givenName}
                  lastName={familyName}
                  nationality={nationality}
                />
              </div>
            )
          })}
        </div>
      </main>
    </>
  )
}
